var o=h=>typeof h=="function",u=()=>`${Date.now}Math.random().toString().slice(10, 15)`;var p=class{genCodeString(e){return`(function(){return ${Function.prototype.toString.call(e)}})()`}updateWorker(e){this.worker.postMessage(JSON.stringify(e))}terminate(){URL.revokeObjectURL(this.scriptUrl),this.scriptUrl="",this.worker&&this.worker.terminate()}constructor(e){if(!window)throw new Error("Detected not in browser environment.");if(!window.Worker)throw new Error("Web Worker is not supported in the environment.");if(!window.URL&&!URL.createObjectURL)throw new Error("URL API is not supported in the environment.");if(!window.Promise)throw new Error("Promise Feature is not supported in the environment.");this.methodSet=new Set,this.scriptUrl=URL.createObjectURL(new Blob([`(()=>{var d=(e,a)=>()=>(a||(a={exports:{}},e(a.exports,a)),a.exports);var n=d((exports,module)=>{var methodsMap={};function invoke(e,a,o){try{if(!methodsMap[e])throw new Error("function "+e+" is not registered.");var s=methodsMap[e].apply(null,a);Promise.resolve(s).then(function(t){self.postMessage(JSON.stringify({data:t,name:e,id:o}))}).catch(function(t){throw t})}catch(r){throw r}}self.onmessage=function(e){var data=JSON.parse(e.data),type=data.type,name=data.name;switch(type){case"add":methodsMap[name]=eval(data.code);break;case"remove":methodsMap[name]&&delete methodsMap[name];break;case"clear":methodsMap={};break;case"invoke":var params=data.params,id=data.id;invoke(name,params,id);break}}});n();})();
`])),this.worker=new Worker(this.scriptUrl,e)}add(...e){return e.forEach((t,i)=>{if(!o(t)){console.warn(`Registration failed, methods[${i}] is not a Function type.`);return}let r=t.name;if(!r||r.trim()===""){console.warn(`Registration failed, methods[${i}] is a anonymous function.`);return}if(this.methodSet.has(r)){console.warn(`Registration failed, methods[${i}] is already registered.`);return}this.methodSet.add(r),this.updateWorker({name:r,type:"add",code:this.genCodeString(t)})}),this}remove(e){o(e)&&(e=e.name),!!this.methodSet.has(e)&&(this.methodSet.delete(e),this.updateWorker({type:"remove",name:e}))}clear(){this.methodSet.clear(),this.updateWorker({type:"clear"})}list(){let e=[];return this.methodSet.forEach(t=>{e.push(t)}),e.join(" | ")}invoke(e,t){if(o(e)&&(e=e.name),!this.methodSet.has(e))throw new Error(`${e} is not defined in Funcwork.`);let i=u();return new Promise((r,c)=>{let n=a=>{try{let{id:d,data:w}=JSON.parse(a.data);d===i&&r(w)}catch(d){c(d)}this.worker.removeEventListener("message",n),this.worker.removeEventListener("error",s)},s=a=>{this.worker.removeEventListener("message",n),this.worker.removeEventListener("error",s),c(a)};this.worker.addEventListener("message",n),this.worker.addEventListener("error",s),this.updateWorker({type:"invoke",name:e,params:Array.isArray(t)?t:[t],id:i})})}destroy(){this.terminate(),this.clear()}};export{p as FuncWork};
//# sourceMappingURL=index.esm.js.map
